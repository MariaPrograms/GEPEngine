#ifdef VERTEX

attribute vec3 a_Position;
attribute vec2 a_TexCoord;
attribute vec3 a_Normal;

uniform mat4 u_Projection;
uniform mat4 u_Model;
uniform mat4 u_View;

varying vec3 v_Normal;
varying vec2 v_TexCoord;
varying vec3 v_FragPos;

void main()
{
  v_FragPos = vec3u_Model * vec4(a_Position, 1.0));
  gl_Position = u_Projection * u_View * vec4(v_FragPos, 1);

  v_Normal = a_Normal;
  v_TexCoord = a_TexCoord;
}

#endif
#ifdef FRAGMENT

uniform sampler2D u_Texture;

varying vec3 v_Normal;
varying vec2 v_TexCoord;
varying vec3 v_FragPos;

uniform vec3 u_LightPos; 
uniform vec3 u_LightColor;

void main()
{
  vec3 objectColor = texture2D(u_Texture, v_TexCoord);

  // ambient
  float ambientStrength = 0.1;
  vec3 ambient = ambientStrength * u_LightColor;
  	
  // diffuse 
  vec3 norm = normalize(v_Normal);
  vec3 lightDir = normalize(u_LightPos - v_FragPos);
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = diff * u_LightColor;
            
  vec3 result = (ambient + diffuse) * objectColor;
  gl_FragColor = vec4(result, 1.0);
}

#endif